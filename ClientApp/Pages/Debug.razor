@page "/debug"
@inject HttpClient Http

<h3>API Debug Tool</h3>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h4>Test API Endpoints</h4>
            <div class="mb-3">
                <label class="form-label">API Endpoint:</label>
                <input @bind="apiEndpoint" class="form-control" placeholder="/api/products" />
            </div>
            <button class="btn btn-primary" @onclick="TestEndpoint">Test Endpoint</button>
            
            <h5 class="mt-4">Response Details:</h5>
            <div class="alert alert-info">
                <strong>Status Code:</strong> @statusCode<br>
                <strong>Content Type:</strong> @contentType<br>
                <strong>Response Time:</strong> @responseTime ms
            </div>
            
            <h5>Raw Response:</h5>
            <pre class="bg-light p-3" style="max-height: 300px; overflow-y: auto;">@rawResponse</pre>
        </div>
        
        <div class="col-md-6">
            <h4>CORS Test</h4>
            <div class="alert @(corsStatus == "OK" ? "alert-success" : "alert-danger")">
                <strong>CORS Status:</strong> @corsStatus<br>
                @if (!string.IsNullOrEmpty(corsError))
                {
                    <strong>Error:</strong> @corsError
                }
            </div>
            
            <h4>JSON Structure Validator</h4>
            <div class="mb-3">
                <label class="form-label">Expected Properties:</label>
                <textarea @bind="expectedProperties" class="form-control" rows="4" 
                          placeholder="Id, Name, Price, Stock"></textarea>
            </div>
            <button class="btn btn-warning" @onclick="ValidateJsonStructure">Validate JSON</button>
            
            <div class="mt-3">
                @if (validationResults.Any())
                {
                    <h6>Validation Results:</h6>
                    <ul class="list-group">
                        @foreach (var result in validationResults)
                        {
                            <li class="list-group-item @(result.IsValid ? "list-group-item-success" : "list-group-item-danger")">
                                @result.Property: @(result.IsValid ? "✓ Found" : "✗ Missing")
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string apiEndpoint = "/api/productlist";
    private string statusCode = "";
    private string contentType = "";
    private string rawResponse = "";
    private string responseTime = "";
    private string corsStatus = "";
    private string corsError = "";
    private string expectedProperties = "Id, Name, Price, Stock";
    private List<ValidationResult> validationResults = new();

    private async Task TestEndpoint()
    {
        try
        {
            var startTime = DateTime.Now;
            var response = await Http.GetAsync(apiEndpoint);
            var endTime = DateTime.Now;
            
            statusCode = $"{(int)response.StatusCode} {response.StatusCode}";
            contentType = response.Content.Headers.ContentType?.ToString() ?? "Not specified";
            rawResponse = await response.Content.ReadAsStringAsync();
            responseTime = (endTime - startTime).TotalMilliseconds.ToString("F0");
            
            // Test CORS
            if (response.IsSuccessStatusCode)
            {
                corsStatus = "OK";
                corsError = "";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                corsStatus = "BLOCKED";
                corsError = "Possible CORS issue - check server configuration";
            }
            else
            {
                corsStatus = "ERROR";
                corsError = $"HTTP {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            statusCode = "ERROR";
            rawResponse = ex.Message;
            corsStatus = "ERROR";
            corsError = ex.Message;
            responseTime = "N/A";
        }
    }

    private void ValidateJsonStructure()
    {
        validationResults.Clear();
        
        if (string.IsNullOrEmpty(rawResponse))
        {
            validationResults.Add(new ValidationResult { Property = "No Response", IsValid = false });
            return;
        }

        try
        {
            var expectedProps = expectedProperties.Split(',').Select(p => p.Trim()).ToList();
            
            // Simple JSON property validation
            foreach (var prop in expectedProps)
            {
                var isFound = rawResponse.Contains($"\"{prop}\"") || 
                              rawResponse.Contains($"\"{prop.ToLower()}\"") ||
                              rawResponse.Contains($"\"{char.ToUpper(prop[0]) + prop.Substring(1)}\"");
                
                validationResults.Add(new ValidationResult 
                { 
                    Property = prop, 
                    IsValid = isFound 
                });
            }
        }
        catch (Exception)
        {
            validationResults.Add(new ValidationResult { Property = "Validation Error", IsValid = false });
        }
    }

    public class ValidationResult
    {
        public string Property { get; set; } = "";
        public bool IsValid { get; set; }
    }
}
