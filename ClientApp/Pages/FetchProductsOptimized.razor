@page "/fetchproducts-optimized"
@inject IApiService ApiService
@inject ILogger<FetchProductsOptimized> Logger
@using ClientApp.Services

<h3>Product List (Optimized)</h3>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <span class="badge bg-info">Total Products: @totalCount</span>
        @if (isFromCache)
        {
            <span class="badge bg-success ms-2">ðŸ“¦ Cached Data</span>
        }
        else
        {
            <span class="badge bg-warning ms-2">ðŸ”„ Fresh Data</span>
        }
    </div>
    <div>
        <button class="btn btn-sm btn-outline-secondary" @onclick="RefreshData" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
            }
            ðŸ”„ Refresh
        </button>
    </div>
</div>

@if (isLoading && products == null)
{
    <div class="text-center p-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading products...</p>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">Error!</h4>
        <p>@errorMessage</p>
        <hr>
        <button class="btn btn-outline-danger btn-sm" @onclick="RefreshData">
            Try Again
        </button>
    </div>
}
else if (products != null && products.Any())
{
    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-md-6 col-lg-4 mb-3">
                <div class="card h-100 shadow-sm product-card">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@product.Category.Name</h6>
                        <p class="card-text">
                            <strong class="text-success fs-5">$@product.Price.ToString("F2")</strong>
                        </p>
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">
                                Stock: <span class="badge @(product.Stock > 20 ? "bg-success" : product.Stock > 5 ? "bg-warning" : "bg-danger")">
                                    @product.Stock
                                </span>
                            </small>
                            @if (product.UpdatedAt.HasValue)
                            {
                                <small class="text-muted">
                                    Updated: @product.UpdatedAt.Value.ToString("MMM dd")
                                </small>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(product.Category.Description))
                        {
                            <small class="text-muted d-block mt-2">@product.Category.Description</small>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="text-center p-4">
        <h5>No products found</h5>
        <p class="text-muted">There are currently no products available.</p>
    </div>
}

<style>
    .product-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
    
    .product-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
    }
</style>

@code {
    private List<Product>? products;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private int totalCount = 0;
    private bool isFromCache = false;
    private DateTime lastLoadTime = DateTime.MinValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    private async Task RefreshData()
    {
        await LoadProductsAsync(forceRefresh: true);
    }

    private async Task LoadProductsAsync(bool forceRefresh = false)
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            // Check if we need to refresh (force refresh or data older than 5 minutes)
            var shouldRefresh = forceRefresh || 
                               lastLoadTime == DateTime.MinValue || 
                               DateTime.Now.Subtract(lastLoadTime).TotalMinutes > 5;

            if (!shouldRefresh && products != null)
            {
                isLoading = false;
                isFromCache = true;
                return;
            }

            Logger.LogInformation("Loading products from API");
            
            var response = await ApiService.GetAsync<List<ProductResponse>>("/api/productlist");
            
            if (response?.Success == true && response.Data != null)
            {
                products = response.Data.Select(MapToProduct).ToList();
                totalCount = response.TotalCount;
                lastLoadTime = DateTime.Now;
                isFromCache = false;
                
                Logger.LogInformation($"Successfully loaded {products.Count} products");
            }
            else
            {
                errorMessage = response?.Message ?? "Failed to load products";
                Logger.LogWarning($"API response unsuccessful: {errorMessage}");
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}";
            Logger.LogError(ex, "Network error while loading products");
        }
        catch (TaskCanceledException ex)
        {
            errorMessage = "Request timed out. Please try again.";
            Logger.LogError(ex, "Timeout error while loading products");
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            Logger.LogError(ex, "Unexpected error while loading products");
        }
        finally
        {
            isLoading = false;
        }
    }

    private static Product MapToProduct(ProductResponse response)
    {
        return new Product
        {
            Id = response.Id,
            Name = response.Name,
            Price = response.Price,
            Stock = response.Stock,
            Category = new Category
            {
                Id = response.Category.Id,
                Name = response.Category.Name,
                Description = response.Category.Description
            },
            CreatedAt = response.CreatedAt,
            UpdatedAt = response.UpdatedAt,
            IsActive = response.IsActive
        };
    }
}
