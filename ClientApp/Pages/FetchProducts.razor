@page "/fetchproducts"
@inject IApiService ApiService
@inject ILogger<FetchProducts> Logger
@using ClientApp.Services

<h3>Product List</h3>

<ul>
    @if (products != null)
    {
        foreach (var product in products)
        {
            <li>
                <strong>@product.Name</strong> - $@product.Price.ToString("F2")
                <br />
                <small>
                    Stock: @product.Stock | 
                    Category: @product.Category.Name
                    @if (!string.IsNullOrEmpty(product.Category.Description))
                    {
                        <span> - @product.Category.Description</span>
                    }
                    @if (product.UpdatedAt.HasValue)
                    {
                        <br /><text>Last Updated: @product.UpdatedAt.Value.ToString("MMM dd, yyyy")</text>
                    }
                </small>
            </li>
        }
    }
    else if (isLoading)
    {
        <li>Loading...</li>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <li style="color: red;">Error: @errorMessage</li>
    }
    else
    {
        <li>No products found.</li>
    }
</ul>

@code {
    private Product[]? products;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            Logger.LogInformation("Loading products from API using ApiService");
            
            var response = await ApiService.GetAsync<List<ProductResponse>>("/api/productlist");
            
            if (response?.Success == true && response.Data != null)
            {
                products = response.Data.Select(p => new Product
                {
                    Id = p.Id,
                    Name = p.Name,
                    Price = p.Price,
                    Stock = p.Stock,
                    Category = new Category
                    {
                        Id = p.Category.Id,
                        Name = p.Category.Name,
                        Description = p.Category.Description
                    },
                    CreatedAt = p.CreatedAt,
                    UpdatedAt = p.UpdatedAt,
                    IsActive = p.IsActive
                }).ToArray();
                
                Logger.LogInformation($"Successfully loaded {products.Length} products");
            }
            else
            {
                errorMessage = response?.Message ?? "Failed to load products";
                Logger.LogWarning($"API response unsuccessful: {errorMessage}");
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}";
            Logger.LogError(ex, "Network error while loading products");
        }
        catch (TaskCanceledException ex)
        {
            errorMessage = "Request timed out. Please try again.";
            Logger.LogError(ex, "Timeout error while loading products");
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            Logger.LogError(ex, "Unexpected error while loading products");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Models now imported from Services
    // Removed duplicate model definitions to prevent redundancy
}
