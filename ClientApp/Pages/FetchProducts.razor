@page "/fetchproducts"
@inject HttpClient Http
@using System.Linq

<h3>Product List</h3>

<ul>
    @if (products != null)
    {
        foreach (var product in products)
        {
            <li>
                <strong>@product.Name</strong> - $@product.Price.ToString("F2")
                <br />
                <small>
                    Stock: @product.Stock | 
                    Category: @product.Category.Name
                    @if (!string.IsNullOrEmpty(product.Category.Description))
                    {
                        <span> - @product.Category.Description</span>
                    }
                    @if (product.UpdatedAt.HasValue)
                    {
                        <br />Last Updated: @product.UpdatedAt.Value.ToString("MMM dd, yyyy")
                    }
                </small>
            </li>
        }
    }
    else if (isLoading)
    {
        <li>Loading...</li>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <li style="color: red;">Error: @errorMessage</li>
    }
    else
    {
        <li>No products found.</li>
    }
</ul>

@code {
    private Product[]? products;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            // Make API call to fetch products
            var response = await Http.GetAsync("/api/productlist");
            response.EnsureSuccessStatusCode();
            
            var json = await response.Content.ReadAsStringAsync();
            
            // Log the response for debugging
            Console.WriteLine($"API Response: {json}");
            
            // Handle the new standardized JSON structure with API response wrapper
            var apiResponse = System.Text.Json.JsonSerializer.Deserialize<ApiResponse<ProductResponse[]>>(json, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            
            // Extract products from the API response wrapper
            if (apiResponse?.Success == true && apiResponse.Data != null)
            {
                products = apiResponse.Data.Select(p => new Product
                {
                    Id = p.Id,
                    Name = p.Name,
                    Price = p.Price,
                    Stock = p.Stock,
                    Category = new Category
                    {
                        Id = p.Category.Id,
                        Name = p.Category.Name,
                        Description = p.Category.Description
                    },
                    CreatedAt = p.CreatedAt,
                    UpdatedAt = p.UpdatedAt,
                    IsActive = p.IsActive
                }).ToArray();
                
                Console.WriteLine($"Successfully loaded {products.Length} products");
            }
            else
            {
                errorMessage = apiResponse?.Message ?? "Failed to load products";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}";
            Console.WriteLine($"HTTP Error: {ex.Message}");
        }
        catch (TaskCanceledException ex)
        {
            errorMessage = "Request timed out. Please try again.";
            Console.WriteLine($"Timeout Error: {ex.Message}");
        }
        catch (System.Text.Json.JsonException ex)
        {
            errorMessage = "Failed to parse product data. Invalid JSON format.";
            Console.WriteLine($"JSON Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            Console.WriteLine($"General Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Standardized product model matching backend response
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Stock { get; set; }
        public Category Category { get; set; } = new();
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public bool IsActive { get; set; }
    }

    // Category model for nested structure
    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
    }

    // API response models for deserialization
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
        public T? Data { get; set; }
        public DateTime Timestamp { get; set; }
        public int TotalCount { get; set; }
    }

    public class ProductResponse
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Stock { get; set; }
        public CategoryResponse Category { get; set; } = new();
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public bool IsActive { get; set; }
    }

    public class CategoryResponse
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
    }
}
