@page "/fetchproducts"
@inject HttpClient Http
@using System.Linq

<h3>Product List</h3>

<ul>
    @if (products != null)
    {
        foreach (var product in products)
        {
            <li>@product.Name - $@product.Price (Stock: @product.Stock)</li>
        }
    }
    else if (isLoading)
    {
        <li>Loading...</li>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <li style="color: red;">Error: @errorMessage</li>
    }
    else
    {
        <li>No products found.</li>
    }
</ul>

@code {
    private Product[]? products;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            var response = await Http.GetAsync("/api/productlist");
            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStringAsync();
            
            // Try to deserialize as standard Product array first
            try
            {
                products = System.Text.Json.JsonSerializer.Deserialize<Product[]>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            catch (System.Text.Json.JsonException)
            {
                // If standard deserialization fails, try malformed JSON structure
                var apiProducts = System.Text.Json.JsonSerializer.Deserialize<ApiProduct[]>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                // Map API response to our Product model
                if (apiProducts != null)
                {
                    products = apiProducts.Select(ap => new Product
                    {
                        Id = ap.ProductId,
                        Name = ap.ProductName,
                        Price = ap.Cost,
                        Stock = ap.Quantity
                    }).ToArray();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            errorMessage = $"Error loading products: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public double Price { get; set; }
        public int Stock { get; set; }
    }

    // API response model to handle malformed JSON
    public class ApiProduct
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; } = string.Empty;
        public double Cost { get; set; }
        public int Quantity { get; set; }
    }
}
